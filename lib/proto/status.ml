(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(*
  Source: status.proto
  Syntax: proto3
  Parameters:
    debug=false
    annot=''
    opens=[]
    int64_as_int=true
    int32_as_int=true
    fixed_as_int=false
    singleton_record=false
*)

open Ocaml_protoc_plugin.Runtime [@@warning "-33"]
(**/**)
module Imported'modules = struct
  module Any = Any
  module Code = Code
end
(**/**)
module Google = struct
  module Rpc = struct
    module rec Status : sig
      val name': unit -> string
      type t = { code: Imported'modules.Code.Google.Rpc.Code.t; message: string; details: Imported'modules.Any.Google.Protobuf.Any.t option } 
      val make : ?code:Imported'modules.Code.Google.Rpc.Code.t -> ?message:string -> ?details:Imported'modules.Any.Google.Protobuf.Any.t -> unit -> t
      val to_proto: t -> Runtime'.Writer.t
      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
    end = struct 
      let name' () = "status.google.rpc.Status"
      type t = { code: Imported'modules.Code.Google.Rpc.Code.t; message: string; details: Imported'modules.Any.Google.Protobuf.Any.t option }
      let make =
        fun ?code ?message ?details () -> 
        let code = match code with Some v -> v | None -> (Imported'modules.Code.Google.Rpc.Code.from_int 0 |> Runtime'.Result.get ~msg:"Code gen error") in
        let message = match message with Some v -> v | None -> {||} in
        { code; message; details }
      
      let to_proto =
        let apply = fun ~f:f' { code; message; details } -> f' [] code message details in
        let spec = Runtime'.Serialize.C.( basic (1, (enum Imported'modules.Code.Google.Rpc.Code.to_int), proto3) ^:: basic (2, string, proto3) ^:: basic_opt (3, (message (fun t -> Imported'modules.Any.Google.Protobuf.Any.to_proto t))) ^:: nil ) in
        let serialize = Runtime'.Serialize.serialize [] (spec) in
        fun t -> apply ~f:serialize t
      
      let from_proto =
        let constructor = fun _extensions code message details -> { code; message; details } in
        let spec = Runtime'.Deserialize.C.( basic (1, (enum Imported'modules.Code.Google.Rpc.Code.from_int), proto3) ^:: basic (2, string, proto3) ^:: basic_opt (3, (message (fun t -> Imported'modules.Any.Google.Protobuf.Any.from_proto t))) ^:: nil ) in
        let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
        fun writer -> deserialize writer |> Runtime'.Result.open_error
      
    end
  end
end